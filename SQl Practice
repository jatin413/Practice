---Hacker Rank Advance Select Questions
----Occupations

SELECT Doctor, Professor, Singer, Actor
from
(
  SELECT Name, Occupation,
    row_number() over(partition by Occupation order by Name) rn
  from Occupations
) as st
pivot
(
  max(Name)
  FOR Occupation in (Doctor, Professor, Singer, Actor)
) as pivottable


----Interviews

select 
  contests.contest_id, 
  contests.hacker_id, 
  contests.name,
  sum(submissions_sums.sum_submissions),
  sum(submissions_sums.sum_accepted_submissions),
  sum(views_sums.sum_views),
  sum(views_sums.sum_unique_views)
from contests 
join colleges on contests.contest_id = colleges.contest_id
join challenges on colleges.college_id = challenges.college_id

left join 
(select 
  challenge_id,
  sum(total_submissions) as sum_submissions,
  sum(total_accepted_submissions) as sum_accepted_submissions
  from submission_stats group by challenge_id) 
as submissions_sums
on challenges.challenge_id = submissions_sums.challenge_id

left join
(select 
  challenge_id,
  sum(total_views) as sum_views,
  sum(total_unique_views) as sum_unique_views
  from view_stats group by challenge_id) 
as views_sums
on challenges.challenge_id = views_sums.challenge_id

group by contests.contest_id, contests.hacker_id, contests.name

having (
  sum(submissions_sums.sum_submissions) +
  sum(submissions_sums.sum_accepted_submissions) +
  sum(views_sums.sum_views) +
  sum(views_sums.sum_unique_views)
) > 0
order by contests.contest_id


This is the same question as problem #2 in the SQL Chapter of Ace the Data Science Interview!

You are given the tables below containing information on Robinhood trades and users. Write a query to list the top three cities that have the most completed trade orders in descending order. Output the city and number of orders.
SELECT u.city,COUNT(t.order_id)as co 
FROM trades AS t  
JOIN users AS u 
on t.user_id=u.user_id
where t.status='Completed'
group by u.city
ORDER BY co DESC 
LIMIT 3;

Assume you are given the tables below about Facebook pages and page likes. Write a query to return the page IDs of all the Facebook pages that don't have any likes. The output should be in ascending order.
SELECT pg.page_id
FROM pages pg 
left join page_likes pgl 
on pg.page_id=pgl.page_id
WHERE pgl.page_id is NULL ;

Assume that you are given the table below containing information on viewership by device type (where the three types are laptop, tablet, and phone). Define “mobile” as the sum of tablet and phone viewership numbers. Write a query to compare the viewership on laptops versus mobile devices.

Output the total viewership for laptop and mobile devices in the format of "laptop_views", "mobile_views".

SELECT 
SUM(
  case when device_type='laptop' then 1 else 0 end   )lapv,
  SUM(
  case when device_type in ('phone','tablet')
  then 1 else 0 end)as mobv
  from viewership;
  
  
  DATA  LEMUR
  
  select app_id,
            ROUND(100.0 * 
            SUM(CASE WHEN event_type= 'click' then 1 else 0 END) /
                 SUM(CASE WHEN event_type= 'impression' then 1 else 0 END),2) as rd
FROM events
WHERE timestamp>='2022-01-01' and timestamp<='2023-01-01'
GROUP BY app_id;

SELECT user_id, MAX(post_date::date)- MIN(post_date::date) as d
FROM posts
where date_part('year',post_date::date)=2021
group by user_id
HAVING COUNT(post_id )>1 
;


WITH qury as(
SELECT row_number()
OVER(PARTITION BY company_id, title, description)as r, company_id,title,description
FROM job_listings
 ) 
 
 SELECT COUNT(DISTINCT company_id)
 from qury
 where r>1
 
 ;


SELECT COUNT(DISTINCT user_id)
FROM
      ( select user_id,
      rank() 
      OVER(PARTITION BY user_id, product_id ORDER BY  date(purchase_date) ASC) as purchase_no  
      FROM purchases)as r
WHERE purchase_no=2


Assume you are given the table below on Uber transactions made by users. 
Write a query to obtain the third transaction of every user. 
Output the user id, spend and transaction date.

WITH sub AS(
SELECT *,rank() 
OVER(PARTITION BY user_id ORDER BY transaction_date Asc )as r 
FROM transactions)

SELECT user_id, 
  spend, 
  transaction_date  from sub
where sub.r=3
;

The LinkedIn Creator team is looking for power creators who use their personal profile as a company or influencer page. If someone's LinkedIn page has more followers than the company they work for, we can safely assume that person is a power creator.

Write a query to return the IDs of these LinkedIn power creators ordered by the IDs.

Assumption:

Each person with a LinkedIn profile in this database works at one company only.
personal_profiles Table:
Column Name	Type
profile_id	integer
name	string
followers	integer
employer_id	integer
personal_profiles Example Input:
profile_id	name	followers	employer_id
1	Nick Singh	92,000	4
2	Zach Wilson	199,000	2
3	Daliana Liu	171,000	1
4	Ravit Jain	107,000	3
5	Vin Vashishta	139,000	6
6	Susan Wojcicki	39,000	5
company_pages Table:
Column Name	Type
company_id	integer
name	string
followers	integer
company_pages Example Input:
company_id	name	followers
1	The Data Science Podcast	8,000
2	Airbnb	700,000
3	The Ravit Show	6,000
4	DataLemur	200
5	YouTube	1,6000,000
6	DataScience.Vin	4,500
Example Output:
profile_id
1
3
4
5
This output shows that profile IDs 1-5 are all power creators, meaning that they have more followers than their company page.

SELECT p.profile_id
FROM personal_profiles as p join 
company_pages as c 
on p.employer_id=c.company_id
where c.followers <p.followers
ORDER BY p.profile_id;


Assume you are given the table below containing information on Amazon customers and their spend on products belonging to various categories. Identify the top two highest-grossing products within each category in 2022. Output the category, product, and total spend.

product_spend Table:
Column Name	Type
category	string
product	string
user_id	integer
spend	decimal
transaction_date	timestamp
product_spend Example Input:
category	product	user_id	spend	transaction_date
appliance	refrigerator	165	246.00	12/26/2021 12:00:00
appliance	refrigerator	123	299.99	03/02/2022 12:00:00
appliance	washing machine	123	219.80	03/02/2022 12:00:00
electronics	vacuum	178	152.00	04/05/2022 12:00:00
electronics	wireless headset	156	249.90	07/08/2022 12:00:00
electronics	vacuum	145	189.00	07/15/2022 12:00:00
Example Output:
category	product	total_spend
appliance	refrigerator	299.99
appliance	washing machine	219.80
electronics	vacuum	341.00
electronics	wireless headset	249.90





WITH cte AS(
SELECT category,product,sum(spend)as s
FROM product_spend
where transaction_date>='2022-01-01' and transaction_date<='2022-12-31'
GROUP BY category,product
),
tops as (
SELECT *,
RANK() OVER(PARTITION BY category ORDER BY s DESC )as ranking
from cte)

SELECT category,product, s from tops
where ranking<=2
ORDER BY category, ranking;
  
  
  For every customer that bought Photoshop, return a list of their customer_id, and how much they spent in total for other Adobe products excluding Photoshop.

Sort your answer by customer_id in ascending order.

adobe_transactions Table:
Column Name	Type
customer_id	integer
product	integer
revenue	integer
adobe_transactions Example Input:
customer_id	product	revenue
123	Photoshop	50
123	Premier Pro	100
123	After Effects	50
234	Illustrator	200
234	Premier Pro	100
Example Output:
customer_id	revenue
123	150
Explanation: User 123 bought Photoshop, Premier Pro + After Effects, spending $150 for those products. We don't output user 234 because they didn't buy Photoshop.
  
  
  
SELECT customer_id, sum(revenue) as revenue FROM adobe_transactions
WHERE product !='Photoshop' and customer_id in (select customer_id FROM adobe_transactions where product='Photoshop')
group by customer_id
ORDER BY customer_id ;



Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.

Write a SQL query to list the candidates who possess all of the required skills for the job. Sort the the output by candidate ID in ascending order.

Assumption:

There are no duplicates in the candidates table.
candidates Table:
Column Name	Type
candidate_id	integer
skill	varchar
candidates Example Input:
candidate_id	skill
123	Python
123	Tableau
123	PostgreSQL
234	R
234	PowerBI
234	SQL Server
345	Python
345	Tableau
Example Output:
candidate_id
123




WITH cte as(
SELECT candidate_id,SUM( CASE WHEN 
 skill in ('Python', 'Tableau',  'PostgreSQL') then 1 ELSE 0 END)as s
FROM candidates
group by candidate_id
)

SELECT candidate_id 
from cte
where s>=3
group by candidate_id
ORDER BY candidate_id ;


or


SELECT candidate_id, COUNT(skill)
from candidates
where skill in ('Python', 'Tableau', 'PostgreSQL')
GROUP BY candidate_id
having COUNT(skill)=3
ORDER BY candidate_id;



